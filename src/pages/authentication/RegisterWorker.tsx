import * as React from "react";
import type { NextPage } from "next";
import Head from "next/head";
import { useCallback, useState } from "react";
import { signIn, SignInResponse, useSession } from "next-auth/react";
import { Controller, useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { useRouter } from "next/router";
import { useStyletron } from "baseui";
import Form from "../../layouts/Form";
import { FormControl } from "baseui/form-control";
import { Input } from "baseui/input";
import { Button, SIZE } from "baseui/button";
import { ParagraphMedium, ParagraphXSmall } from "baseui/typography";
import { StyledLink } from "baseui/link";
import { Notification, KIND } from "baseui/notification";
import { trpc } from "../../utils/trpc";
import { Select } from "baseui/select";
import {
  IRegisterWorker,
  registerWorkerSchema,
} from "../../server/router/worker/work.type";
import { Textarea } from "baseui/textarea";
import { toaster } from "baseui/toast";
import { hide } from "../browse/components/modals/ReportModal";
import { Toaster } from "../../components/common/Toaster";

const RegisterWorker: NextPage = () => {
  const [css] = useStyletron();
  const { data } = useSession();
  const router = useRouter();

  const {
    control,
    handleSubmit,
    formState: { errors },
    setValue,
    setError,
  } = useForm<IRegisterWorker>({
    resolver: zodResolver(registerWorkerSchema),
  });
  console.log(errors);

  React.useEffect(() => {
    if (data) setValue("userId", data.id as string);
  }, [data]);

  const userMutation = trpc.useMutation(["worker.registerWorker"]);
  const categoryQuery = trpc.useQuery(["category.categoriesWithSubcategory"], {
    retry: false,
  });

  // For Select input with group selection
  const [skill, setSkill] = React.useState({ __ungrouped: [] });
  React.useEffect(() => {
    const categories = categoryQuery.data?.categories;
    if (categories) {
      setSkill({ __ungrouped: [], ...categoryQuery.data?.categories });
    }
  }, [categoryQuery.data]);

  const onSubmit = React.useCallback(
    async (data: IRegisterWorker) => {
      try {
        // console.log(data);
        await userMutation.mutateAsync(data, {
          onSuccess: () => {
            toaster.info("Saved", {});
            router.push("/portfolio/Portfolio");
          },
        });
      } catch (err) {
        console.log(err);
      }
    },
    [data]
  );

  return (
    <div>
      <Head>
        <title>Register as Worker</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <Toaster />
        <Form
          title="Worker Registration"
          hasForm={true}
          onSubmit={handleSubmit(onSubmit)}
        >
          <div
            className={css({
              width: "100%",
              display: "flex",
              flexDirection: "column",
              gap: "20px",
            })}
          >
            <div
              className={css({
                width: "100%",
                display: "flex",
                flexDirection: "column",
                padding: "20px",
                border: "2px solid #EEEEEE",
              })}
            >
              <FormControl
                label="Skill"
                error={errors["subcategoryId"] && <>Skill is required</>}
              >
                <Controller
                  name="subcategoryId"
                  control={control}
                  render={({ field }) => (
                    <Select
                      ref={field.ref}
                      value={field.value}
                      size={SIZE.compact}
                      options={skill}
                      onChange={(params) => field.onChange(params.value[0])}
                      isLoading={categoryQuery.isLoading}
                      placeholder=""
                    />
                  )}
                />
              </FormControl>
              <FormControl
                label="Description - optional"
                caption="describe what you do"
              >
                <Controller
                  name="description"
                  control={control}
                  rules={{ required: false }}
                  render={({ field }) => (
                    <Textarea
                      {...field}
                      size={SIZE.compact}
                      placeholder={""}
                      overrides={{
                        Input: {
                          style: {
                            maxHeight: "300px",
                            minHeight: "100px",
                            minWidth: "300px",
                            width: "100vw", // fill all available space up to parent max-width
                            resize: "both",
                          },
                        },
                        InputContainer: {
                          style: {
                            maxWidth: "100%",
                            width: "min-content",
                          },
                        },
                      }}
                    />
                  )}
                />
              </FormControl>
              <FormControl
                label="Link - optional"
                caption="link to your personal website or website that contains your information"
                error={errors["link"] && "this link is invalid"}
              >
                <Controller
                  name="link"
                  control={control}
                  rules={{ required: false }}
                  render={({ field }) => (
                    <Input {...field} size={SIZE.compact} />
                  )}
                />
              </FormControl>
              <Button
                type="submit"
                overrides={{
                  BaseButton: {
                    style: ({ $theme }) => ({
                      width: "100%",
                    }),
                  },
                }}
              >
                Register
              </Button>
            </div>
          </div>
        </Form>
      </main>
    </div>
  );
};

export default RegisterWorker;
