import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useCallback, useState } from "react";
import { signIn, SignInResponse, useSession } from "next-auth/react";
import { Controller, useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { loginSchema, ILogin } from "../../utils/auth-validation";
import { useRouter } from "next/router";
import { useStyletron } from "baseui";
import Form from "../../layouts/Form";
import { FormControl } from "baseui/form-control";
import { Input } from "baseui/input";
import { Button, SIZE } from "baseui/button";
import { ParagraphMedium, ParagraphXSmall } from "baseui/typography";
import { StyledLink } from "baseui/link";
import { Notification, KIND } from "baseui/notification";

const LogIn: NextPage = () => {
  const router = useRouter();
  const [css, theme] = useStyletron();
  const {
    control,
    handleSubmit,
    formState: { errors },
  } = useForm<ILogin>({
    resolver: zodResolver(loginSchema),
  });
  const [error, setError] = useState<SignInResponse["error"]>();

  const { status } = useSession();

  if (status === "authenticated") {
    router.push("/browse/Browse");
  }

  const onSubmit = useCallback(async (data: ILogin) => {
    await signIn("credentials", {
      ...data,
      callbackUrl: "/browse/Browse",
      redirect: false,
    }).then((res) => {
      if (res?.ok) {
        router.push("/browse/Browse");
      } else {
        setError("Invalid credentials!");
      }
    });
  }, []);

  return (
    <div>
      <Head>
        <title>Next App - Login</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <Form
          title="Sign up to housemade"
          hasForm={true}
          onSubmit={handleSubmit(onSubmit)}
        >
          <div
            className={css({
              width: "100%",
              display: "flex",
              flexDirection: "column",
              gap: "20px",
            })}
          >
            <div
              className={css({
                width: "100%",
                display: "flex",
                flexDirection: "column",

                padding: "20px",
                border: "2px solid #EEEEEE",
              })}
            >
              {error && (
                <Notification kind={KIND.negative}>
                  {() => "Authenticaion Error"}
                </Notification>
              )}
              <FormControl
                label="Email"
                caption=""
                positive={!errors.email}
                error={errors.email ? errors.email.message : null}
              >
                <Controller
                  name="email"
                  control={control}
                  defaultValue=""
                  render={({ field }) => (
                    <Input {...field} ref={null} size={SIZE.compact} />
                  )}
                />
              </FormControl>
              <FormControl
                label="Password"
                caption=""
                positive={!errors.password}
                error={errors.password ? errors.password.message : null}
              >
                <Controller
                  name="password"
                  control={control}
                  defaultValue=""
                  render={({ field }) => (
                    <Input
                      {...field}
                      type="password"
                      ref={null}
                      size={SIZE.compact}
                    />
                  )}
                />
              </FormControl>
              <Button
                type="submit"
                overrides={{
                  BaseButton: {
                    style: () => ({
                      marginBottom: "20px",
                      width: "100%",
                    }),
                  },
                }}
              >
                Log in
              </Button>
              <ParagraphXSmall margin={"0 auto"}>
                <StyledLink
                  onClick={() => alert("This feature is in development")}
                  // href="/authentication/Reset"
                  style={{
                    textDecoration: "none",
                    color: theme.colors.contentStateDisabled,
                  }}
                >
                  Forgot Password
                </StyledLink>
              </ParagraphXSmall>
            </div>
            <div
              className={css({
                width: "100%",
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                gap: "20px",
                padding: "10px 20px",
                border: "2px solid #EEEEEE",
              })}
            >
              <ParagraphMedium margin={0}>
                <span>
                  New to housemade?{" "}
                  <StyledLink
                    href="/authentication/Signup"
                    style={{
                      textDecoration: "none",
                      color: theme.colors.accent,
                    }}
                  >
                    Create an account
                  </StyledLink>
                </span>
              </ParagraphMedium>
            </div>
          </div>
        </Form>
      </main>
    </div>
  );
};

export default LogIn;
